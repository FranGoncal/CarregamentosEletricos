import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
public class ConfiguracoesSeguranca {


    @Bean
    SecurityFilterChain getSecurityFilterChain(HttpSecurity http) throws Exception{
        http.authorizeHttpRequests((autorizacao) -> autorizacao
                        .requestMatchers("/inicio").permitAll()  // Permitir acesso a '/inicio' sem autenticação
                        .anyRequest().authenticated()  // Requer autenticação para qualquer outra requisição
                )
                .httpBasic(withDefaults())
                .formLogin((formlogin) -> formlogin
                        .loginPage("/MICROSERVICO-FRONTEND-SERVER/login")
                        .permitAll()
                        .defaultSuccessUrl("/inicio")  // Redireciona para /inicio após login bem-sucedido
                )
                .logout((formlogout) -> formlogout
                        .logoutUrl("/logout")
                        .permitAll()
                        .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
                        .invalidateHttpSession(true)
                        .deleteCookies("JSESSIONID")
                )
                .exceptionHandling((accessonegado) -> accessonegado
                        .accessDeniedPage("/acesso-negado.html"));
        return http.build();
    }
    @Bean
    public AuthenticationManager
    authenticationManager(AuthenticationConfiguration configuration)
            throws Exception {
        return configuration.getAuthenticationManager();
    }
}